/*  =========================================================================
    zp_proto - Set the env field, transferring ownership from caller

Set the aux field, transferring ownership from caller

Set the chunk field, transferring ownership from caller

    Copyright (c) the Contributors as noted in the AUTHORS file.
    This file is part of ZP, ZeroMQ Piper
    http://githut.com/zmonit/zp

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    =========================================================================
*/

#ifndef ZP_PROTO_H_INCLUDED
#define ZP_PROTO_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/zp_proto.api" to make changes.
//  @interface
//  This API is a draft, and may change without notice.
#ifdef ZP_BUILD_DRAFT_API
#define ZP_PROTO_SUCCESS 200                //
#define ZP_PROTO_BAD_REQUEST 400            //
#define ZP_PROTO_NOT_FOUND 404              //
#define ZP_PROTO_INTERNAL_SERVER_ERROR 500  //
#define ZP_PROTO_NOT_IMPLEMENTED 501        //
#define ZP_PROTO_CONNECTION_OPEN 1          //
#define ZP_PROTO_CONNECTION_PING 2          //
#define ZP_PROTO_CONNECTION_PONG 3          //
#define ZP_PROTO_CONNECTION_CLOSE 4         //
#define ZP_PROTO_OK 5                       //
#define ZP_PROTO_ERROR 6                    //
#define ZP_PROTO_EXEC 7                     //
#define ZP_PROTO_EXEC_STATUS_REPLY 8        //
#define ZP_PROTO_EXEC_CHUNK 9               //
#define ZP_PROTO_EXEC_LIST_REPLY 10         //
#define ZP_PROTO_EXEC_STATUS_GET 11         //
#define ZP_PROTO_EXEC_LIST 12               //
#define ZP_PROTO_EXEC_CANCEL 13             //

//  *** Draft method, for development use, may change without warning ***
//  Create a new empty zp_proto
ZP_EXPORT zp_proto_t *
    zp_proto_new (void);

//  *** Draft method, for development use, may change without warning ***
//  Create a new zp_proto from zpl/zconfig_t *
ZP_EXPORT zp_proto_t *
    zp_proto_new_zpl (zconfig_t *config);

//  *** Draft method, for development use, may change without warning ***
//  Destroy a zp_proto instance
ZP_EXPORT void
    zp_proto_destroy (zp_proto_t **self_p);

//  *** Draft method, for development use, may change without warning ***
//  Create a deep copy of a zp_proto instance
//  Caller owns return value and must destroy it when done.
ZP_EXPORT zp_proto_t *
    zp_proto_dup (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Receive a zp_proto from the socket. Returns 0 if OK, -1 if
//  there was an error. Blocks if there is no message waiting.
ZP_EXPORT int
    zp_proto_recv (zp_proto_t *self, zsock_t *input);

//  *** Draft method, for development use, may change without warning ***
//  Send the zp_proto to the output socket, does not destroy it
ZP_EXPORT int
    zp_proto_send (zp_proto_t *self, zsock_t *output);

//  *** Draft method, for development use, may change without warning ***
//  Print contents of message to stdout
ZP_EXPORT void
    zp_proto_print (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Export class as zconfig_t*. Caller is responsibe for destroying the instance
//  Caller owns return value and must destroy it when done.
ZP_EXPORT zconfig_t *
    zp_proto_zpl (zp_proto_t *self, zconfig_t *parent);

//  *** Draft method, for development use, may change without warning ***
//  Get the message routing id, as a frame
ZP_EXPORT zframe_t *
    zp_proto_routing_id (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Set the message routing id from a frame
ZP_EXPORT void
    zp_proto_set_routing_id (zp_proto_t *self, zframe_t *routing_id);

//  *** Draft method, for development use, may change without warning ***
//  Get the zp_proto message id
ZP_EXPORT int
    zp_proto_id (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Set the zp_proto message id
ZP_EXPORT void
    zp_proto_set_id (zp_proto_t *self, int id);

//  *** Draft method, for development use, may change without warning ***
//  Get the zp_proto message id as printable text
ZP_EXPORT const char *
    zp_proto_command (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the client_id field
ZP_EXPORT const char *
    zp_proto_client_id (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Set the client_id field
ZP_EXPORT void
    zp_proto_set_client_id (zp_proto_t *self, const char *client_id);

//  *** Draft method, for development use, may change without warning ***
//  Get the status_code field
ZP_EXPORT uint16_t
    zp_proto_status_code (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Set the status_code field
ZP_EXPORT void
    zp_proto_set_status_code (zp_proto_t *self, uint16_t status_code);

//  *** Draft method, for development use, may change without warning ***
//  Get the status_reason field
ZP_EXPORT const char *
    zp_proto_status_reason (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Set the status_reason field
ZP_EXPORT void
    zp_proto_set_status_reason (zp_proto_t *self, const char *status_reason);

//  *** Draft method, for development use, may change without warning ***
//  Get the args field
ZP_EXPORT zlist_t *
    zp_proto_args (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the args field and transfer ownership to caller
ZP_EXPORT zlist_t *
    zp_proto_get_args (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Set the args field
ZP_EXPORT void
    zp_proto_set_args (zp_proto_t *self, zlist_t **args_p);

//  *** Draft method, for development use, may change without warning ***
//  Get a copy of the env field
ZP_EXPORT zhash_t *
    zp_proto_env (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the env field and transfer ownership to caller
ZP_EXPORT zhash_t *
    zp_proto_get_env (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//
ZP_EXPORT void
    zp_proto_set_env (zp_proto_t *self, zhash_t **env_p);

//  *** Draft method, for development use, may change without warning ***
//  Get a copy of the aux field
ZP_EXPORT zhash_t *
    zp_proto_aux (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the aux field and transfer ownership to caller
ZP_EXPORT zhash_t *
    zp_proto_get_aux (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//
ZP_EXPORT void
    zp_proto_set_aux (zp_proto_t *self, zhash_t **aux_p);

//  *** Draft method, for development use, may change without warning ***
//  Get the handle field
ZP_EXPORT uint32_t
    zp_proto_handle (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Set the handle field
ZP_EXPORT void
    zp_proto_set_handle (zp_proto_t *self, uint32_t handle);

//  *** Draft method, for development use, may change without warning ***
//  Get the returncode field
ZP_EXPORT uint16_t
    zp_proto_returncode (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Set the returncode field
ZP_EXPORT void
    zp_proto_set_returncode (zp_proto_t *self, uint16_t returncode);

//  *** Draft method, for development use, may change without warning ***
//  Get the fd field
ZP_EXPORT uint32_t
    zp_proto_fd (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Set the fd field
ZP_EXPORT void
    zp_proto_set_fd (zp_proto_t *self, uint32_t fd);

//  *** Draft method, for development use, may change without warning ***
//  Get a copy of the chunk field
ZP_EXPORT zchunk_t *
    zp_proto_chunk (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the chunk field and transfer ownership to caller
ZP_EXPORT zchunk_t *
    zp_proto_get_chunk (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//
ZP_EXPORT void
    zp_proto_set_chunk (zp_proto_t *self, zchunk_t **chunk_p);

//  *** Draft method, for development use, may change without warning ***
//  Get the handles field
ZP_EXPORT zlist_t *
    zp_proto_handles (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the handles field and transfer ownership to caller
ZP_EXPORT zlist_t *
    zp_proto_get_handles (zp_proto_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Set the handles field
ZP_EXPORT void
    zp_proto_set_handles (zp_proto_t *self, zlist_t **handles_p);

//  *** Draft method, for development use, may change without warning ***
//  Self test of this class.
ZP_EXPORT void
    zp_proto_test (bool verbose);

#endif // ZP_BUILD_DRAFT_API
//  @end

#ifdef __cplusplus
}
#endif

#endif
